
static function calculateDelay(min, max){
    return (Math.random() * max) + min + 's';
}

style {
  .div-block {
    display: block;
    justify-content: center;
    -ms-flex-align: center;
    align-items: center;
    position: relative;
  }
  .container {
    max-width: 500px;
  }
  .stars {
    position: absolute;
  }
  .rocket {
    animation: float 2s var(--ebay-ease-in-out) alternate infinite;
    position: absolute;
  }
  .star {
    fill-rule:evenodd;
    clip-rule:evenodd;
    fill:#A60D8A;
  }
  .twinkle {
    animation: flicker infinite;
  }
}

<div.container>
  <div.div-block>
    <img.rocket src="./rocket-floating.svg" alt="rocket activated"/>
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 125 120" style="enable-background:new 0 0 125 120;" preserveAspectRatio="xMidYMid meet" xml:space="preserve">
    <g id="Page-1">
      <g transform="translate(-67.000000, -412.000000)">
          <g id="rocket-stars" transform="translate(187.326670, 515.206544) rotate(35.000000) translate(-187.326670, -515.206544) translate(89.826670, 416.206544)">
          <g id="stars" transform="translate(0.000000, 0.000000)">
            <circle.star cx="65.5" cy="96.7" r="1.5"/>
            <circle.star cx="-9.9" cy="103.1" r="0.7"/>
            <circle.star cx="11" cy="46.2" r="1.5"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(2,3), animationDelay: calculateDelay(3,6)} cx="74.7" cy="76.6" r="1.5"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(2,3), animationDelay: calculateDelay(1,3)} cx="74.1" cy="115.8" r="0.7"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(2,3), animationDelay: calculateDelay(1,3)} cx="3.2" cy="70.6" r="0.7"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(2,4), animationDelay: calculateDelay(2,8)} cx="-16.5" cy="83.8" r="1.5"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(2,5), animationDelay: calculateDelay(3,5)} cx="-17.2" cy="126.7" r="1.5"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(3,5), animationDelay: calculateDelay(0,3)} cx="56.2" cy="62" r="0.7"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(3,4), animationDelay: calculateDelay(0,2)} cx="4.3" cy="140.8" r="0.7"/>
            <circle.star.twinkle style={animationDuration: calculateDelay(2,4), animationDelay: calculateDelay(2,4)} cx="60.6" cy="135.5" r="1.5"/>
          </g>
        </g>
      </g>
    </g>
    </svg>
  </div>
</div>
